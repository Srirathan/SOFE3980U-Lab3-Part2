pipeline {
    environment {
        SERVICE_ACCOUNT= credentials('service_account') // secret file for GCP credentials
        PROJECT = credentials('project_id')
        REPO_PATH = credentials("repo_path") // secret text for repo path
        APP_NAME = "binarycalculatorwebapp"
        IMAGE_TAG = "$REPO_PATH/$APP_NAME"
        CLUSTER = credentials("cluster_name") // secret text for cluster name
        CLUSTER_ZONE = credentials("cluster_zone") // secret text for cluster zone
    }
    agent {
        kubernetes {
            label 'sample-app'
            yaml """
                apiVersion: v1
                kind: Pod
                metadata:
                    labels:
                        component: ci
                spec:
                    containers:
                    - name: gcloud
                      image: google/cloud-sdk:latest
                      command:
                      - cat
                      tty: true
            """
        }
    }
    tools {
        maven 'maven'
    }
    stages {
        stage('test') {
            steps {
                sh 'mvn clean test -f ./BinaryCalculatorWebapp/pom.xml'
            }
        }
        stage('build') {
            steps {
                sh 'mvn package -DskipTests -f ./BinaryCalculatorWebapp/ clean package'
            }
        }
        stage('containerize') {
            steps {
                container('gcloud') {
                    dir('BinaryCalculatorWebapp') {
                        sh 'gcloud auth activate-service-account --key-file $SERVICE_ACCOUNT'
                        sh 'gcloud config set project $PROJECT'
                        
                        script {
                            def retries = 5
                            def attempt = 0
                            def success = false
                            while (attempt < retries && !success) {
                                try {
                                    sh 'gcloud builds submit -t $IMAGE_TAG --suppress-logs'
                                    success = true
                                } catch (Exception e) {
                                    attempt++
                                    echo "Attempt $attempt failed. Retrying..."
                                    sleep 30
                                }
                            }
                            if (!success) {
                                error "Docker push failed after $retries attempts"
                            }
                        }
                    }
                }
            }
        }
        stage('deployment') {
            steps {
                container('gcloud') {
                    dir('BinaryCalculatorWebapp') {
                        sh 'gcloud auth activate-service-account --key-file $SERVICE_ACCOUNT'
                        sh 'gcloud config set project $PROJECT'
                        sh 'gcloud container clusters get-credentials $CLUSTER --region=$CLUSTER_ZONE'
                        script {
                            try {
                                sh 'kubectl delete deployment binarycalculator-deployment || true'
                            } catch (Exception e) {
                                echo "Deployment deletion failed or didn't exist"
                            }
                        }
                        sh 'kubectl create deployment binarycalculator-deployment --image $IMAGE_TAG --port=8080'
                    }
                }
            }
        }
        stage('service') {
            steps {
                container('gcloud') {
                    dir('BinaryCalculatorWebapp') {
                        sh 'gcloud auth activate-service-account --key-file $SERVICE_ACCOUNT'
                        sh 'gcloud config set project $PROJECT'
                        sh 'gcloud container clusters get-credentials $CLUSTER --region=$CLUSTER_ZONE'
                        script {
                            try {
                                sh 'kubectl expose deployment binarycalculator-deployment --type=LoadBalancer --name=binarycalculator-service || true'
                            } catch (Exception e) {
                                echo "Service already exists or failed to expose"
                            }
                        }
                        sh "kubectl get service/binarycalculator-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}'"
                    }
                }
            }
        }
    }
}
